# Coverage data, format version: 3.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
main
165
201
7
Memory.MemoryInput.runApp
Apply
false
0
true
Memory.this.MemoryInput.runApp(RealInputHandler)

2
src\main\scala\Memory.scala
<empty>
MemoryInput
Object
Memory.MemoryInput
runApp
354
380
15
Memory.GameStarting
Apply
false
0
false
Memory.this.GameStarting(inputHandler)

3
src\main\scala\Memory.scala
<empty>
MemoryInput
Object
Memory.MemoryInput
runApp
436
473
17
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Game started successfully.")

4
src\main\scala\Memory.scala
<empty>
MemoryInput
Object
Memory.MemoryInput
runApp
436
473
17
scala.Predef.println
Block
true
0
false
scala.Predef.println("Game started successfully.")

5
src\main\scala\Memory.scala
<empty>
MemoryInput
Object
Memory.MemoryInput
runApp
502
550
18
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Error starting game: ".+(e.getMessage()))

6
src\main\scala\Memory.scala
<empty>
MemoryInput
Object
Memory.MemoryInput
runApp
502
550
18
scala.Predef.println
Block
true
0
false
scala.Predef.println("Error starting game: ".+(e.getMessage()))

7
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
801
860
27
scala.Predef.println
Apply
false
0
false
scala.Predef.println("How many players will play? (Choose between 1-3)")

8
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
878
901
28
InputHandler.readLine
Apply
false
0
false
inputHandler.readLine()

9
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
878
907
28
scala.collection.StringOps.toInt
Select
false
0
false
scala.Predef.augmentString(inputHandler.readLine()).toInt

10
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
925
926
29
<nosymbol>
Literal
false
0
false
1

11
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
930
939
29
scala.Int.>
Apply
false
0
false
count.>(3)

12
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
917
939
29
scala.Boolean.||
Apply
false
0
false
count.<(1).||(count.>(3))

13
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
941
1016
29
<nosymbol>
Throw
false
0
false
throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")

14
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
941
1016
29
<nosymbol>
Block
true
0
false
throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")

15
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
913
913
29
<nosymbol>
Literal
false
0
false
()

16
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
913
913
29
<nosymbol>
Block
true
0
false
()

17
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerCount
790
1032
26
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[Int]({
  scala.Predef.println("How many players will play? (Choose between 1-3)");
  val count: Int = scala.Predef.augmentString(inputHandler.readLine()).toInt;
  if (count.<(1).||(count.>(3)))
    throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")
  else
    ();
  count
})

18
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
checkPlayerCount
1150
1190
35
scala.util.Success.apply
Apply
false
0
false
scala.util.Success.apply[String]("One player has been selected.")

19
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
checkPlayerCount
1150
1190
35
scala.util.Success.apply
Block
true
0
false
scala.util.Success.apply[String]("One player has been selected.")

20
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
checkPlayerCount
1214
1313
36
java.lang.Exception.<init>
Apply
false
0
false
new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented.")

21
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
checkPlayerCount
1206
1314
36
scala.util.Failure.apply
Apply
false
0
false
scala.util.Failure.apply[Nothing](new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented."))

22
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
checkPlayerCount
1206
1314
36
scala.util.Failure.apply
Block
true
0
false
scala.util.Failure.apply[Nothing](new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented."))

23
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerName
1421
1455
41
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Please enter your name:")

24
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
askPlayerName
1461
1484
42
InputHandler.readLine
Apply
false
0
false
inputHandler.readLine()

25
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
greetPlayer
1564
1620
47
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Welcome to the Memory Game, ".+(name).+("! Have fun!"))

26
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1855
1882
54
Memory.askPlayerName
Apply
false
0
false
Memory.this.askPlayerName(inputHandler)

27
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1810
1810
53
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[String, String](check, name)

28
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1901
1918
56
Memory.greetPlayer
Apply
false
0
false
Memory.this.greetPlayer(name)

29
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1901
1918
56
Memory.greetPlayer
Block
true
0
false
Memory.this.greetPlayer(name)

30
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1810
1918
53
scala.util.Try.map
Apply
false
0
false
Memory.this.checkPlayerCount(count).map[(String, String)](((check: String) => {
  val name: String = Memory.this.askPlayerName(inputHandler);
  scala.Tuple2.apply[String, String](check, name)
})).map[Unit](((x$1: (String, String)) => (x$1: (String, String) @unchecked) match {
  case (_1: String, _2: String): (String, String)((check @ _), (name @ _)) => Memory.this.greetPlayer(name)
}))

31
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
GameStarting
1756
1918
52
scala.util.Try.flatMap
Apply
false
0
false
Memory.this.askPlayerCount(inputHandler).flatMap[Unit](((count: Int) => Memory.this.checkPlayerCount(count).map[(String, String)](((check: String) => {
  val name: String = Memory.this.askPlayerName(inputHandler);
  scala.Tuple2.apply[String, String](check, name)
})).map[Unit](((x$1: (String, String)) => (x$1: (String, String) @unchecked) match {
  case (_1: String, _2: String): (String, String)((check @ _), (name @ _)) => Memory.this.greetPlayer(name)
}))))

32
src\main\scala\Memory.scala
<empty>
RealInputHandler
Object
RealInputHandler
readLine
2060
2085
66
scala.io.StdIn.readLine
Apply
false
0
false
scala.io.StdIn.readLine()


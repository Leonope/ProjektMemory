# Coverage data, format version: 3.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
main
236
252
9
Controller.<init>
Apply
false
0
true
new Controller()

2
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
main
304
323
11
Tui.<init>
Apply
false
0
true
new Tui(controller)

3
src\main\scala\Memory.scala
<empty>
Memory
Object
Memory
main
329
338
12
Tui.run
Apply
false
0
true
tui.run()

4
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
<none>
155
171
5
util.RealInputHandler
Select
false
0
false
util.RealInputHandler

5
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
<none>
174
194
6
util.Observable.add
Apply
false
0
false
Tui.this.controller.add(this)

6
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
update
319
362
10
scala.Predef.println
Apply
false
0
false
scala.Predef.println("The game state has been updated.")

7
src\main\scala\aview\tui.scala
<empty>
RestartGameCommand
Class
Tui.RestartGameCommand
execute
542
575
19
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Game is starting again")

8
src\main\scala\aview\tui.scala
<empty>
RestartGameCommand
Class
Tui.RestartGameCommand
execute
580
605
20
Controller.GameStarting
Apply
false
0
true
RestartGameCommand.this.controller.GameStarting()

9
src\main\scala\aview\tui.scala
<empty>
RestartGameCommand
Class
Tui.RestartGameCommand
execute
603
603
20
<nosymbol>
Literal
false
0
true
()

10
src\main\scala\aview\tui.scala
<empty>
QuitGameCommand
Class
Tui.QuitGameCommand
execute
683
706
26
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Game exiting")

11
src\main\scala\aview\tui.scala
<empty>
QuitGameCommand
Class
Tui.QuitGameCommand
execute
711
725
27
java.lang.System.exit
Apply
false
0
true
java.lang.System.exit(0)

12
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
767
804
32
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Play again? (restart/quit)")

13
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
822
862
33
java.lang.String.toLowerCase
Apply
false
0
true
Tui.this.inputHandler.readLine().trim().toLowerCase()

14
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
959
969
36
Tui.controller
Select
false
0
true
Tui.this.controller

15
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
936
970
36
Tui.RestartGameCommand.<init>
Apply
false
0
true
new Tui.this.RestartGameCommand(Tui.this.controller)

16
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
979
1003
37
Tui.RestartGameCommand.execute
Apply
false
0
true
restartCommand.execute()

17
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
903
1003
35
<nosymbol>
Block
true
0
true
{
  val restartCommand: Tui.this.RestartGameCommand = new Tui.this.RestartGameCommand(Tui.this.controller);
  restartCommand.execute()
}

18
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
1052
1073
39
Tui.QuitGameCommand.<init>
Apply
false
0
true
new Tui.this.QuitGameCommand()

19
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
1082
1103
40
Tui.QuitGameCommand.execute
Apply
false
0
true
quitCommand.execute()

20
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
1022
1103
38
<nosymbol>
Block
true
0
true
{
  val quitCommand: Tui.this.QuitGameCommand = new Tui.this.QuitGameCommand();
  quitCommand.execute()
}

21
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
1129
1192
42
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Unknown Command pls type either \'quit\' or \'restart\'.")

22
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
endGamePrompt
1129
1192
42
scala.Predef.println
Apply
true
0
true
scala.Predef.println("Unknown Command pls type either \'quit\' or \'restart\'.")

23
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1242
1267
48
Controller.GameStarting
Apply
false
0
true
Tui.this.controller.GameStarting()

24
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1278
1313
49
Logic.checkGameEnd
Apply
false
0
true
Tui.this.controller.gameLogic.checkGameEnd()

25
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1323
1338
50
Tui.endGamePrompt
Apply
false
0
true
Tui.this.endGamePrompt()

26
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1323
1338
50
Tui.endGamePrompt
Apply
true
0
true
Tui.this.endGamePrompt()

27
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1274
1274
49
<nosymbol>
Literal
false
0
true
()

28
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1274
1274
49
<nosymbol>
Literal
true
0
true
()

29
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1234
1373
47
<nosymbol>
Block
true
0
true
{
  Tui.this.controller.GameStarting();
  if (Tui.this.controller.gameLogic.checkGameEnd())
    Tui.this.endGamePrompt()
  else
    ()
}

30
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1415
1427
54
java.lang.Throwable.getMessage
Apply
false
0
false
e.getMessage()

31
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1407
1428
54
scala.Predef.println
Apply
false
0
false
scala.Predef.println(e.getMessage())

32
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
run
1407
1428
54
scala.Predef.println
Block
true
0
false
scala.Predef.println(e.getMessage())

33
src\main\scala\aview\tui.scala
<empty>
Tui
Class
Tui
displayMessage
1519
1535
59
scala.Predef.println
Apply
false
0
false
scala.Predef.println(message)

34
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
<none>
214
230
6
util.RealInputHandler
Select
false
0
false
util.RealInputHandler

35
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
withNotification
352
367
11
util.Observable.notifyObservers
Select
false
0
false
Controller.this.notifyObservers

36
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
698
726
23
scala.Any.asInstanceOf
TypeApply
false
0
true
x$2.asInstanceOf[Matrix[Card]]

37
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
742
756
24
scala.Tuple2.apply
Apply
false
0
true
scala.Tuple2.apply[String, Matrix[Card]](name, matrix)

38
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
654
756
23
scala.util.Try.map
Apply
false
0
true
Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))

39
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
592
756
21
scala.util.Try.flatMap
Apply
false
0
false
Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))

40
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
560
756
20
scala.util.Try.flatMap
Apply
false
0
false
Controller.this.askPlayerName().flatMap[(String, Matrix[Card])](((name: String) => Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))))

41
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
519
756
19
scala.util.Try.flatMap
Apply
false
0
false
Controller.this.checkPlayerCount(count).flatMap[(String, Matrix[Card])](((check: String) => Controller.this.askPlayerName().flatMap[(String, Matrix[Card])](((name: String) => Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))))))

42
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
471
756
18
scala.util.Try.flatMap
Apply
false
0
false
Controller.this.askPlayerCount().flatMap[(String, Matrix[Card])](((count: Int) => Controller.this.checkPlayerCount(count).flatMap[(String, Matrix[Card])](((check: String) => Controller.this.askPlayerName().flatMap[(String, Matrix[Card])](((name: String) => Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))))))))

43
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
834
851
28
Controller.greetPlayer
Apply
false
0
true
Controller.this.greetPlayer(name)

44
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
862
905
29
Controller.updateGameView
Apply
false
0
true
Controller.this.updateGameView(name, "Memory game setup:")

45
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
916
931
30
scala.Predef.println
Apply
false
0
true
scala.Predef.println(matrix)

46
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1043
1076
32
scala.Any.asInstanceOf
TypeApply
false
0
true
matrix.asInstanceOf[Matrix[Card]]

47
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1078
1096
32
BonusScoring.<init>
Apply
false
0
true
new BonusScoring()

48
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1033
1097
32
Logic.<init>
Apply
false
0
true
new Logic(matrix.asInstanceOf[Matrix[Card]], new BonusScoring())

49
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1021
1097
32
Controller.gameLogic_=
Apply
false
0
true
Controller.this.gameLogic_=(new Logic(matrix.asInstanceOf[Matrix[Card]], new BonusScoring()))

50
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1108
1118
33
Controller.playGame
Apply
false
0
true
Controller.this.playGame()

51
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
821
1118
27
<nosymbol>
Block
true
0
true
{
  Controller.this.greetPlayer(name);
  Controller.this.updateGameView(name, "Memory game setup:");
  scala.Predef.println(matrix);
  Controller.this.gameLogic_=(new Logic(matrix.asInstanceOf[Matrix[Card]], new BonusScoring()));
  Controller.this.playGame()
}

52
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1171
1173
35
<nosymbol>
Literal
false
0
true
""

53
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1175
1179
35
<nosymbol>
Literal
false
0
true
null

54
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1156
1221
35
Controller.updateGameView
Apply
false
0
true
Controller.this.updateGameView("", null, "Error starting game: ".+(e.getMessage()))

55
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1232
1239
36
<nosymbol>
Throw
false
0
true
throw e

56
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
1143
1239
34
<nosymbol>
Block
true
0
true
{
  Controller.this.updateGameView("", null, "Error starting game: ".+(e.getMessage()));
  throw e
}

57
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
441
1269
16
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[Unit]({
  val gameOutcome: scala.util.Try[(String, Matrix[Card])] = Controller.this.askPlayerCount().flatMap[(String, Matrix[Card])](((count: Int) => Controller.this.checkPlayerCount(count).flatMap[(String, Matrix[Card])](((check: String) => Controller.this.askPlayerName().flatMap[(String, Matrix[Card])](((name: String) => Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))))))));
  gameOutcome match {
    case (value: (String, Matrix[Card])): scala.util.Success[(String, Matrix[Card])]((_1: String, _2: Matrix[Card]): (String, Matrix[Card])((name @ _), (matrix @ _))) => {
      Controller.this.greetPlayer(name);
      Controller.this.updateGameView(name, "Memory game setup:");
      scala.Predef.println(matrix);
      Controller.this.gameLogic_=(new Logic(matrix.asInstanceOf[Matrix[Card]], new BonusScoring()));
      Controller.this.playGame()
    }
    case (exception: Throwable): scala.util.Failure[(String, Matrix[Card])]((e @ _)) => {
      Controller.this.updateGameView("", null, "Error starting game: ".+(e.getMessage()));
      throw e
    }
  }
})

58
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
GameStarting
418
1273
15
Controller.withNotification
Apply
false
0
false
Controller.this.withNotification[Unit](scala.util.Try.apply[Unit]({
  val gameOutcome: scala.util.Try[(String, Matrix[Card])] = Controller.this.askPlayerCount().flatMap[(String, Matrix[Card])](((count: Int) => Controller.this.checkPlayerCount(count).flatMap[(String, Matrix[Card])](((check: String) => Controller.this.askPlayerName().flatMap[(String, Matrix[Card])](((name: String) => Controller.this.askCardCount().flatMap[(String, Matrix[Card])](((cardCount: Int) => Matrix.setupMatrix(cardCount, Matrix.setupMatrix$default$2).map[Matrix[Card]](((x$2: Matrix[Card]) => x$2.asInstanceOf[Matrix[Card]])).map[(String, Matrix[Card])](((matrix: Matrix[Card]) => scala.Tuple2.apply[String, Matrix[Card]](name, matrix)))))))))));
  gameOutcome match {
    case (value: (String, Matrix[Card])): scala.util.Success[(String, Matrix[Card])]((_1: String, _2: Matrix[Card]): (String, Matrix[Card])((name @ _), (matrix @ _))) => {
      Controller.this.greetPlayer(name);
      Controller.this.updateGameView(name, "Memory game setup:");
      scala.Predef.println(matrix);
      Controller.this.gameLogic_=(new Logic(matrix.asInstanceOf[Matrix[Card]], new BonusScoring()));
      Controller.this.playGame()
    }
    case (exception: Throwable): scala.util.Failure[(String, Matrix[Card])]((e @ _)) => {
      Controller.this.updateGameView("", null, "Error starting game: ".+(e.getMessage()));
      throw e
    }
  }
}))

59
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1358
1434
43
util.InputHandler.askForInput
Apply
false
0
true
Controller.this.inputHandler.askForInput("How many players will play? (Choose between 1-3)")

60
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1451
1467
44
scala.collection.StringOps.toInt
Select
false
0
true
scala.Predef.augmentString(countInput).toInt

61
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1484
1485
45
<nosymbol>
Literal
false
0
true
1

62
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1489
1498
45
scala.Int.>
Apply
false
0
true
count.>(3)

63
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1476
1498
45
scala.Boolean.||
Apply
false
0
true
count.<(1).||(count.>(3))

64
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1508
1583
46
<nosymbol>
Throw
false
0
true
throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")

65
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1508
1583
46
<nosymbol>
Throw
true
0
true
throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")

66
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1472
1472
45
<nosymbol>
Literal
false
0
true
()

67
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1472
1472
45
<nosymbol>
Literal
true
0
true
()

68
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1331
1603
42
scala.util.Try.apply
Apply
false
0
true
scala.util.Try.apply[Int]({
  val countInput: String = Controller.this.inputHandler.askForInput("How many players will play? (Choose between 1-3)");
  val count: Int = scala.Predef.augmentString(countInput).toInt;
  if (count.<(1).||(count.>(3)))
    throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")
  else
    ();
  count
})

69
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerCount
1310
1605
41
Controller.withNotification
Apply
false
0
true
Controller.this.withNotification[Int](scala.util.Try.apply[Int]({
  val countInput: String = Controller.this.inputHandler.askForInput("How many players will play? (Choose between 1-3)");
  val count: Int = scala.Predef.augmentString(countInput).toInt;
  if (count.<(1).||(count.>(3)))
    throw new scala.`package`.IllegalArgumentException("Player count must be between 1 and 3.")
  else
    ();
  count
}))

70
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1711
1751
55
scala.util.Success.apply
Apply
false
0
true
scala.util.Success.apply[String]("One player has been selected.")

71
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1711
1751
55
scala.util.Success.apply
Apply
true
0
true
scala.util.Success.apply[String]("One player has been selected.")

72
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1776
1875
56
java.lang.Exception.<init>
Apply
false
0
true
new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented.")

73
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1768
1876
56
scala.util.Failure.apply
Apply
false
0
true
scala.util.Failure.apply[Nothing](new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented."))

74
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1768
1876
56
scala.util.Failure.apply
Apply
true
0
true
scala.util.Failure.apply[Nothing](new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented."))

75
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
checkPlayerCount
1658
1886
53
Controller.withNotification
Apply
false
0
true
Controller.this.withNotification[String](count match {
  case 1 => scala.util.Success.apply[String]("One player has been selected.")
  case _ => scala.util.Failure.apply[Nothing](new scala.`package`.Exception("Only 1 player is allowed, as the function for more players is not yet implemented."))
})

76
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerName
1952
2003
61
util.InputHandler.askForInput
Apply
false
0
true
Controller.this.inputHandler.askForInput("Please enter your name:")

77
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerName
1948
2004
61
scala.util.Try.apply
Apply
false
0
true
scala.util.Try.apply[String](Controller.this.inputHandler.askForInput("Please enter your name:"))

78
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askPlayerName
1925
2008
60
Controller.withNotification
Apply
false
0
true
Controller.this.withNotification[String](scala.util.Try.apply[String](Controller.this.inputHandler.askForInput("Please enter your name:")))

79
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2090
2160
66
util.InputHandler.askForInput
Apply
false
0
true
Controller.this.inputHandler.askForInput("How many unique cards will be in the game?")

80
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2090
2166
66
scala.collection.StringOps.toInt
Select
false
0
true
scala.Predef.augmentString(Controller.this.inputHandler.askForInput("How many unique cards will be in the game?")).toInt

81
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2177
2187
67
scala.Int.<=
Apply
false
0
true
count.<=(0)

82
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2189
2279
67
<nosymbol>
Throw
false
0
true
throw new scala.`package`.IllegalArgumentException("The count must be a positive integer greater than 0.")

83
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2189
2279
67
<nosymbol>
Throw
true
0
true
throw new scala.`package`.IllegalArgumentException("The count must be a positive integer greater than 0.")

84
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2173
2173
67
<nosymbol>
Literal
false
0
true
()

85
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2173
2173
67
<nosymbol>
Literal
true
0
true
()

86
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2286
2295
68
scala.Int.*
Apply
false
0
true
count.*(2)

87
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2066
2301
65
scala.util.Try.apply
Apply
false
0
true
scala.util.Try.apply[Int]({
  val count: Int = scala.Predef.augmentString(Controller.this.inputHandler.askForInput("How many unique cards will be in the game?")).toInt;
  if (count.<=(0))
    throw new scala.`package`.IllegalArgumentException("The count must be a positive integer greater than 0.")
  else
    ();
  count.*(2)
})

88
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2346
2403
71
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Success! The game will have ".+(cardCount).+(" cards."))

89
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2410
2428
72
scala.util.Success.apply
Apply
false
0
true
scala.util.Success.apply[Int](cardCount)

90
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2337
2428
70
<nosymbol>
Block
true
0
true
{
  scala.Predef.println("Success! The game will have ".+(cardCount).+(" cards."));
  scala.util.Success.apply[Int](cardCount)
}

91
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2466
2510
74
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Failure: ".+(exception.getMessage()))

92
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2517
2535
75
scala.util.Failure.apply
Apply
false
0
true
scala.util.Failure.apply[Nothing](exception)

93
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2457
2535
73
<nosymbol>
Block
true
0
true
{
  scala.Predef.println("Failure: ".+(exception.getMessage()));
  scala.util.Failure.apply[Nothing](exception)
}

94
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
askCardCount
2043
2545
64
Controller.withNotification
Apply
false
0
true
Controller.this.withNotification[Int](scala.util.Try.apply[Int]({
  val count: Int = scala.Predef.augmentString(Controller.this.inputHandler.askForInput("How many unique cards will be in the game?")).toInt;
  if (count.<=(0))
    throw new scala.`package`.IllegalArgumentException("The count must be a positive integer greater than 0.")
  else
    ();
  count.*(2)
}) match {
  case (value: Int): scala.util.Success[Int]((cardCount @ _)) => {
    scala.Predef.println("Success! The game will have ".+(cardCount).+(" cards."));
    scala.util.Success.apply[Int](cardCount)
  }
  case (exception: Throwable): scala.util.Failure[Int]((exception @ _)) => {
    scala.Predef.println("Failure: ".+(exception.getMessage()));
    scala.util.Failure.apply[Nothing](exception)
  }
})

95
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2609
2614
80
<nosymbol>
Literal
false
0
true
false

96
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2624
2634
81
scala.Boolean.unary_!
Select
false
0
true
gameEnded.unary_!

97
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2720
2822
84
java.lang.String.split
Apply
false
0
true
Controller.this.inputHandler.askForInput("Enter the row and column to turn a card (e.g., \'1 2\'): ").trim().split("\\s+")

98
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2833
2850
85
scala.Int.!=
Apply
false
0
true
input.length.!=(2)

99
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2862
2934
86
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Invalid input: please enter two numbers separated by a space.")

100
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2862
2934
86
scala.Predef.println
Apply
true
0
true
scala.Predef.println("Invalid input: please enter two numbers separated by a space.")

101
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2968
2986
88
scala.Int.-
Apply
false
0
true
scala.Predef.augmentString(input.apply(0)).toInt.-(1)

102
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3046
3064
89
scala.Int.-
Apply
false
0
true
scala.Predef.augmentString(input.apply(1)).toInt.-(1)

103
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3074
3102
91
Logic.turnCard
Apply
false
0
true
Controller.this.gameLogic.turnCard(row, col)

104
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3119
3138
92
Logic.getMatrix
Select
false
0
true
Controller.this.gameLogic.getMatrix

105
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3111
3139
92
scala.Predef.println
Apply
false
0
true
scala.Predef.println(Controller.this.gameLogic.getMatrix)

106
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3153
3177
94
Logic.checkGameEnd
Apply
false
0
true
Controller.this.gameLogic.checkGameEnd()

107
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3203
3207
95
<nosymbol>
Literal
false
0
true
true

108
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3218
3279
96
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Congratulations! You have uncovered all the cards.")

109
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3290
3341
97
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Your final score: ".+(Controller.this.gameLogic.getScore))

110
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3179
3351
94
<nosymbol>
Block
true
0
true
{
  gameEnded = true;
  scala.Predef.println("Congratulations! You have uncovered all the cards.");
  scala.Predef.println("Your final score: ".+(Controller.this.gameLogic.getScore))
}

111
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3149
3149
94
<nosymbol>
Literal
false
0
true
()

112
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3149
3149
94
<nosymbol>
Literal
true
0
true
()

113
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2948
3359
87
<nosymbol>
Block
true
0
true
{
  val row: Int = scala.Predef.augmentString(input.apply(0)).toInt.-(1);
  val col: Int = scala.Predef.augmentString(input.apply(1)).toInt.-(1);
  Controller.this.gameLogic.turnCard(row, col);
  scala.Predef.println(Controller.this.gameLogic.getMatrix);
  if (Controller.this.gameLogic.checkGameEnd())
    {
      gameEnded = true;
      scala.Predef.println("Congratulations! You have uncovered all the cards.");
      scala.Predef.println("Your final score: ".+(Controller.this.gameLogic.getScore))
    }
  else
    ()
}

114
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2646
3365
82
<nosymbol>
Block
true
0
true
{
  val input: Array[String] = Controller.this.inputHandler.askForInput("Enter the row and column to turn a card (e.g., \'1 2\'): ").trim().split("\\s+");
  if (input.length.!=(2))
    scala.Predef.println("Invalid input: please enter two numbers separated by a space.")
  else
    {
      val row: Int = scala.Predef.augmentString(input.apply(0)).toInt.-(1);
      val col: Int = scala.Predef.augmentString(input.apply(1)).toInt.-(1);
      Controller.this.gameLogic.turnCard(row, col);
      scala.Predef.println(Controller.this.gameLogic.getMatrix);
      if (Controller.this.gameLogic.checkGameEnd())
        {
          gameEnded = true;
          scala.Predef.println("Congratulations! You have uncovered all the cards.");
          scala.Predef.println("Your final score: ".+(Controller.this.gameLogic.getScore))
        }
      else
        ()
    }
}

115
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3421
3474
102
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Invalid input: please enter valid numbers.")

116
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3421
3474
102
scala.Predef.println
Apply
true
0
true
scala.Predef.println("Invalid input: please enter valid numbers.")

117
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3526
3618
104
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Invalid indices: your input does not correspond to valid positions in the matrix.")

118
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3526
3618
104
scala.Predef.println
Apply
true
0
true
scala.Predef.println("Invalid indices: your input does not correspond to valid positions in the matrix.")

119
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3665
3706
106
scala.Predef.println
Apply
false
0
true
scala.Predef.println("Game logic is not initialized.")

120
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3665
3706
106
scala.Predef.println
Apply
true
0
true
scala.Predef.println("Game logic is not initialized.")

121
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3742
3799
108
scala.Predef.println
Apply
false
0
true
scala.Predef.println("An unexpected error occurred: ".+(e.getMessage()))

122
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
3742
3799
108
scala.Predef.println
Apply
true
0
true
scala.Predef.println("An unexpected error occurred: ".+(e.getMessage()))

123
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2642
2642
82
Controller.while$1
Apply
false
0
true
while$1()

124
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2642
3805
81
<nosymbol>
Block
true
0
true
{
  try {
    val input: Array[String] = Controller.this.inputHandler.askForInput("Enter the row and column to turn a card (e.g., \'1 2\'): ").trim().split("\\s+");
    if (input.length.!=(2))
      scala.Predef.println("Invalid input: please enter two numbers separated by a space.")
    else
      {
        val row: Int = scala.Predef.augmentString(input.apply(0)).toInt.-(1);
        val col: Int = scala.Predef.augmentString(input.apply(1)).toInt.-(1);
        Controller.this.gameLogic.turnCard(row, col);
        scala.Predef.println(Controller.this.gameLogic.getMatrix);
        if (Controller.this.gameLogic.checkGameEnd())
          {
            gameEnded = true;
            scala.Predef.println("Congratulations! You have uncovered all the cards.");
            scala.Predef.println("Your final score: ".+(Controller.this.gameLogic.getScore))
          }
        else
          ()
      }
  } catch {
    case (_: NumberFormatException) => scala.Predef.println("Invalid input: please enter valid numbers.")
    case (_: IndexOutOfBoundsException) => scala.Predef.println("Invalid indices: your input does not correspond to valid positions in the matrix.")
    case (_: NullPointerException) => scala.Predef.println("Game logic is not initialized.")
    case (e @ (_: Exception)) => scala.Predef.println("An unexpected error occurred: ".+(e.getMessage()))
  };
  while$1()
}

125
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2617
2617
81
<nosymbol>
Literal
false
0
true
()

126
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
playGame
2617
2617
81
<nosymbol>
Literal
true
0
true
()

127
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
greetPlayer
3876
3945
115
Controller.updateGameView
Apply
false
0
false
Controller.this.updateGameView(name, "Welcome to the Memory Game, ".+(name).+("! Have fun!"))

128
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
greetPlayer
3950
3965
116
util.Observable.notifyObservers
Select
false
0
false
Controller.this.notifyObservers

129
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
updateGameView
4061
4076
120
util.Observable.notifyObservers
Select
false
0
false
Controller.this.notifyObservers

130
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
updateGameView
4148
4187
124
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Message for ".+(name).+(": ").+(message))

131
src\main\scala\controller\Controller.scala
<empty>
Controller
Class
Controller
updateGameView
4190
4205
125
util.Observable.notifyObservers
Select
false
0
false
Controller.this.notifyObservers

132
src\main\scala\model\Card.scala
<empty>
FaceUpState
Object
FaceUpState
click
296
328
9
Card.copy
Apply
false
0
false
card.copy(x$2, x$1)

133
src\main\scala\model\Card.scala
<empty>
FaceUpState
Object
FaceUpState
display
365
381
10
scala.Any.toString
Apply
false
0
false
card.id.toString()

134
src\main\scala\model\Card.scala
<empty>
FaceUpState
Object
FaceUpState
isFaceUp
408
412
11
<nosymbol>
Literal
false
0
false
true

135
src\main\scala\model\Card.scala
<empty>
FaceDownState
Object
FaceDownState
click
494
524
15
Card.copy
Apply
false
0
false
card.copy(x$2, x$1)

136
src\main\scala\model\Card.scala
<empty>
FaceDownState
Object
FaceDownState
display
561
564
16
<nosymbol>
Literal
false
0
false
"*"

137
src\main\scala\model\Card.scala
<empty>
FaceDownState
Object
FaceDownState
isFaceUp
591
596
17
<nosymbol>
Literal
false
0
false
false

138
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
turnCard
696
718
22
java.lang.Object.==
Apply
false
0
false
Card.this.state.==(FaceDownState)

139
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
turnCard
720
745
22
Card.copy
Apply
false
0
false
Card.this.copy(x$2, x$1)

140
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
turnCard
720
745
22
<nosymbol>
Block
true
0
false
{
  <artifact> val x$1: FaceUpState.type = FaceUpState;
  <artifact> val x$2: Int = Card.this.copy$default$1;
  Card.this.copy(x$2, x$1)
}

141
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
turnCard
755
782
23
Card.copy
Apply
false
0
false
Card.this.copy(x$4, x$3)

142
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
turnCard
755
782
23
<nosymbol>
Block
true
0
false
{
  <artifact> val x$3: FaceDownState.type = FaceDownState;
  <artifact> val x$4: Int = Card.this.copy$default$1;
  Card.this.copy(x$4, x$3)
}

143
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
isFaceUp
813
827
25
CardState.isFaceUp
Select
false
0
false
Card.this.state.isFaceUp

144
src\main\scala\model\Card.scala
<empty>
Card
Class
Card
toString
862
881
26
CardState.display
Apply
false
0
false
Card.this.state.display(this)

145
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
<none>
121
122
2
<nosymbol>
Literal
false
0
false
0

146
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
<none>
169
173
3
scala.None
Select
false
0
false
scala.None

147
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
<none>
214
215
4
<nosymbol>
Literal
false
0
false
0

148
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
getMatrix
251
257
6
Logic.matrix
Select
false
0
false
Logic.this.matrix

149
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
319
335
9
Matrix.apply
Apply
false
0
false
Logic.this.matrix.apply(row, col)

150
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
344
358
10
scala.Boolean.unary_!
Select
false
0
false
card.isFaceUp.unary_!

151
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
382
397
11
Card.turnCard
Apply
false
0
false
card.turnCard()

152
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
455
487
12
Matrix.update
Apply
false
0
false
Logic.this.matrix.update(row, col, newCard)

153
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
538
555
13
scala.Option.isEmpty
Select
false
0
false
Logic.this.firstCard.isEmpty

154
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
584
594
14
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[Int, Int](row, col)

155
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
579
595
14
scala.Some.apply
Apply
false
0
false
scala.Some.apply[(Int, Int)](scala.Tuple2.apply[Int, Int](row, col))

156
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
567
595
14
Logic.firstCard_=
Apply
false
0
false
Logic.this.firstCard_=(scala.Some.apply[(Int, Int)](scala.Tuple2.apply[Int, Int](row, col)))

157
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
567
595
14
Logic.firstCard_=
Block
true
0
false
Logic.this.firstCard_=(scala.Some.apply[(Int, Int)](scala.Tuple2.apply[Int, Int](row, col)))

158
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
647
663
16
scala.Tuple2._1
Select
false
0
false
Logic.this.firstCard.get._1

159
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
665
681
16
scala.Tuple2._2
Select
false
0
false
Logic.this.firstCard.get._2

160
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
636
692
16
Logic.checkCards
Apply
false
0
false
Logic.this.checkCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col)

161
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
717
740
17
scala.Int.+
Apply
false
0
false
Logic.this.consecutiveMatches.+(1)

162
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
717
740
17
Logic.consecutiveMatches_=
Apply
false
0
false
Logic.this.consecutiveMatches_=(Logic.this.consecutiveMatches.+(1))

163
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
717
740
17
Logic.consecutiveMatches_=
Block
true
0
false
Logic.this.consecutiveMatches_=(Logic.this.consecutiveMatches.+(1))

164
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
746
768
17
Logic.consecutiveMatches_=
Apply
false
0
false
Logic.this.consecutiveMatches_=(0)

165
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
746
768
17
Logic.consecutiveMatches_=
Block
true
0
false
Logic.this.consecutiveMatches_=(0)

166
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
816
821
18
Logic.score
Select
false
0
false
Logic.this.score

167
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
835
853
18
Logic.consecutiveMatches
Select
false
0
false
Logic.this.consecutiveMatches

168
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
785
854
18
ScoringStrategy.calculateScore
Apply
false
0
false
Logic.this.scoringStrategy.calculateScore(Logic.this.score, matchFound, Logic.this.consecutiveMatches)

169
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
777
854
18
Logic.score_=
Apply
false
0
false
Logic.this.score_=(Logic.this.scoringStrategy.calculateScore(Logic.this.score, matchFound, Logic.this.consecutiveMatches))

170
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
867
878
19
scala.Boolean.unary_!
Select
false
0
false
matchFound.unary_!

171
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
892
908
19
scala.Tuple2._1
Select
false
0
false
Logic.this.firstCard.get._1

172
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
910
926
19
scala.Tuple2._2
Select
false
0
false
Logic.this.firstCard.get._2

173
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
880
937
19
Logic.removeCards
Apply
false
0
false
Logic.this.removeCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col)

174
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
880
937
19
Logic.removeCards
Block
true
0
false
Logic.this.removeCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col)

175
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
863
863
19
<nosymbol>
Literal
false
0
false
()

176
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
863
863
19
<nosymbol>
Block
true
0
false
()

177
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
958
962
20
scala.None
Select
false
0
false
scala.None

178
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
946
962
20
Logic.firstCard_=
Apply
false
0
false
Logic.this.firstCard_=(scala.None)

179
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
609
970
15
<nosymbol>
Block
true
0
false
{
  val matchFound: Boolean = Logic.this.checkCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col);
  if (matchFound)
    Logic.this.consecutiveMatches_=(Logic.this.consecutiveMatches.+(1))
  else
    Logic.this.consecutiveMatches_=(0);
  Logic.this.score_=(Logic.this.scoringStrategy.calculateScore(Logic.this.score, matchFound, Logic.this.consecutiveMatches));
  if (matchFound.unary_!)
    Logic.this.removeCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col)
  else
    ();
  Logic.this.firstCard_=(scala.None)
}

180
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
360
976
10
<nosymbol>
Block
true
0
false
{
  val newCard: Card = card.turnCard();
  Logic.this.matrix.update(row, col, newCard);
  if (Logic.this.firstCard.isEmpty)
    Logic.this.firstCard_=(scala.Some.apply[(Int, Int)](scala.Tuple2.apply[Int, Int](row, col)))
  else
    {
      val matchFound: Boolean = Logic.this.checkCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col);
      if (matchFound)
        Logic.this.consecutiveMatches_=(Logic.this.consecutiveMatches.+(1))
      else
        Logic.this.consecutiveMatches_=(0);
      Logic.this.score_=(Logic.this.scoringStrategy.calculateScore(Logic.this.score, matchFound, Logic.this.consecutiveMatches));
      if (matchFound.unary_!)
        Logic.this.removeCards(Logic.this.firstCard.get._1, Logic.this.firstCard.get._2, row, col)
      else
        ();
      Logic.this.firstCard_=(scala.None)
    }
}

181
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
340
340
10
<nosymbol>
Literal
false
0
false
()

182
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
turnCard
340
340
10
<nosymbol>
Block
true
0
false
()

183
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1073
1091
27
Matrix.apply
Apply
false
0
false
Logic.this.matrix.apply(row1, col1)

184
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1108
1126
28
Matrix.apply
Apply
false
0
false
Logic.this.matrix.apply(row2, col2)

185
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1147
1155
29
Card.id
Select
false
0
false
card2.id

186
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1135
1155
29
scala.Int.==
Apply
false
0
false
card1.id.==(card2.id)

187
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1165
1240
30
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Congratulations! You found a matching pair with ID ".+(card1.id).+("."))

188
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1266
1270
32
<nosymbol>
Literal
false
0
false
true

189
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1157
1276
29
<nosymbol>
Block
true
0
false
{
  scala.Predef.println("Congratulations! You found a matching pair with ID ".+(card1.id).+("."));
  true
}

190
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1290
1379
34
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Sorry, the cards with ID ".+(card1.id).+(" and ").+(card2.id).+(" do not match. Try again."))

191
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1386
1391
35
<nosymbol>
Literal
false
0
false
false

192
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkCards
1282
1397
33
<nosymbol>
Block
true
0
false
{
  scala.Predef.println("Sorry, the cards with ID ".+(card1.id).+(" and ").+(card2.id).+(" do not match. Try again."));
  false
}

193
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1489
1507
40
Matrix.apply
Apply
false
0
false
Logic.this.matrix.apply(row1, col1)

194
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1522
1540
41
Matrix.apply
Apply
false
0
false
Logic.this.matrix.apply(row2, col2)

195
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1558
1574
42
Card.turnCard
Apply
false
0
false
card1.turnCard()

196
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1593
1609
43
Card.turnCard
Apply
false
0
false
card2.turnCard()

197
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1663
1698
46
Matrix.update
Apply
false
0
false
Logic.this.matrix.update(row1, col1, newCard1)

198
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
removeCards
1701
1736
47
Matrix.update
Apply
false
0
false
Logic.this.matrix.update(row2, col2, newCard2)

199
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkGameEnd
1777
1791
52
Matrix.getGrid
Select
false
0
false
Logic.this.matrix.getGrid

200
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkGameEnd
1792
1792
52
scala.LowPriorityImplicits.wrapRefArray
Apply
false
0
false
scala.Predef.wrapRefArray[Card](xs)

201
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkGameEnd
1777
1799
52
scala.collection.ArrayOps.flatten
ApplyToImplicitArgs
false
0
false
scala.Predef.refArrayOps[Array[Card]](Logic.this.matrix.getGrid).flatten[Card](((xs: Array[Card]) => scala.Predef.wrapRefArray[Card](xs)), (ClassTag.apply[Card](classOf[Card]): scala.reflect.ClassTag[Card]))

202
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkGameEnd
1807
1817
52
Card.isFaceUp
Select
false
0
false
x$1.isFaceUp

203
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
checkGameEnd
1777
1818
52
scala.collection.ArrayOps.forall
Apply
false
0
false
scala.Predef.refArrayOps[Card](scala.Predef.refArrayOps[Array[Card]](Logic.this.matrix.getGrid).flatten[Card](((xs: Array[Card]) => scala.Predef.wrapRefArray[Card](xs)), (ClassTag.apply[Card](classOf[Card]): scala.reflect.ClassTag[Card]))).forall(((x$1: Card) => x$1.isFaceUp))

204
src\main\scala\model\Logic.scala
<empty>
Logic
Class
Logic
getScore
1844
1849
55
Logic.score
Select
false
0
false
Logic.this.score

205
src\main\scala\model\Logic.scala
<empty>
StandardScoring
Class
StandardScoring
calculateScore
2182
2199
64
scala.Int.+
Apply
false
0
false
currentScore.+(10)

206
src\main\scala\model\Logic.scala
<empty>
StandardScoring
Class
StandardScoring
calculateScore
2182
2199
64
scala.Int.+
Block
true
0
false
currentScore.+(10)

207
src\main\scala\model\Logic.scala
<empty>
StandardScoring
Class
StandardScoring
calculateScore
2209
2221
65
StandardScoring.currentScore
Ident
true
0
false
currentScore

208
src\main\scala\model\Logic.scala
<empty>
BonusScoring
Class
BonusScoring
calculateScore
2404
2406
71
<nosymbol>
Literal
false
0
false
10

209
src\main\scala\model\Logic.scala
<empty>
BonusScoring
Class
BonusScoring
calculateScore
2410
2432
71
scala.Int.*
Apply
false
0
false
consecutiveMatches.*(5)

210
src\main\scala\model\Logic.scala
<empty>
BonusScoring
Class
BonusScoring
calculateScore
2389
2433
71
scala.Int.+
Apply
false
0
false
currentScore.+(10).+(consecutiveMatches.*(5))

211
src\main\scala\model\Logic.scala
<empty>
BonusScoring
Class
BonusScoring
calculateScore
2389
2433
71
scala.Int.+
Block
true
0
false
currentScore.+(10).+(consecutiveMatches.*(5))

212
src\main\scala\model\Logic.scala
<empty>
BonusScoring
Class
BonusScoring
calculateScore
2443
2455
72
BonusScoring.currentScore
Ident
true
0
false
currentScore

213
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
<none>
194
198
6
Matrix.rows
Select
false
0
false
Matrix.this.rows

214
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
<none>
200
204
6
Matrix.cols
Select
false
0
false
Matrix.this.cols

215
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
<none>
206
210
6
Matrix.fill
Select
false
0
false
Matrix.this.fill

216
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
<none>
183
211
6
scala.Array.fill
ApplyToImplicitArgs
false
0
false
scala.Array.fill[T](Matrix.this.rows, Matrix.this.cols)(Matrix.this.fill)(Matrix.this.evidence$1)

217
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
apply
250
264
8
scala.Array.apply
Apply
false
0
false
Matrix.this.grid.apply(row).apply(col)

218
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
update
316
338
9
scala.Array.update
Apply
false
0
false
Matrix.this.grid.apply(row).update(col, value)

219
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
toString
378
443
12
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
scala.Predef.wrapRefArray[String](scala.Predef.refArrayOps[Array[T]](Matrix.this.grid).map[String](((row: Array[T]) => scala.Predef.wrapRefArray[String](scala.Predef.genericArrayOps[T](row).map[String](((x$1: T) => x$1.toString()))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]))).mkString(" ")))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]))).mkString("\n")

220
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
537
541
17
Matrix.cols
Select
false
0
false
Matrix.this.cols

221
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
530
541
17
scala.Int.*
Apply
false
0
false
Matrix.this.rows.*(Matrix.this.cols)

222
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
514
541
17
scala.Int.==
Apply
false
0
false
cards.length.==(Matrix.this.rows.*(Matrix.this.cols))

223
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
506
542
17
scala.Predef.require
Apply
false
0
false
scala.Predef.require(cards.length.==(Matrix.this.rows.*(Matrix.this.cols)))

224
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
557
558
18
<nosymbol>
Literal
false
0
false
0

225
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
571
572
19
<nosymbol>
Literal
false
0
false
0

226
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
579
583
19
Matrix.rows
Select
false
0
false
Matrix.this.rows

227
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
590
591
19
<nosymbol>
Literal
false
0
false
0

228
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
598
602
19
Matrix.cols
Select
false
0
false
Matrix.this.cols

229
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
623
635
20
scala.collection.SeqOps.apply
Apply
false
0
false
cards.apply(index)

230
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
610
636
20
Matrix.update
Apply
false
0
false
Matrix.this.update(i, j, cards.apply(index))

231
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
641
651
21
scala.Int.+
Apply
false
0
false
index.+(1)

232
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
585
655
19
scala.collection.immutable.Range.foreach
Apply
false
0
false
scala.Predef.intWrapper(0).until(Matrix.this.cols).foreach[Unit](((j: Int) => {
  Matrix.this.update(i, j, cards.apply(index));
  index = index.+(1)
}))

233
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
initializeWithCards
561
655
19
scala.collection.immutable.Range.foreach
Apply
false
0
false
scala.Predef.intWrapper(0).until(Matrix.this.rows).foreach[Unit](((i: Int) => scala.Predef.intWrapper(0).until(Matrix.this.cols).foreach[Unit](((j: Int) => {
  Matrix.this.update(i, j, cards.apply(index));
  index = index.+(1)
}))))

234
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
getGrid
729
733
26
Matrix.grid
Select
false
0
false
Matrix.this.grid

235
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
779
793
29
scala.Array.apply
Apply
false
0
false
Matrix.this.grid.apply(row).apply(col)

236
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
845
860
31
Card.turnCard
Apply
false
0
false
card.turnCard()

237
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
935
958
32
scala.Any.asInstanceOf
TypeApply
false
0
false
newCard.asInstanceOf[T]

238
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
918
959
32
Matrix.update
Apply
false
0
false
Matrix.this.update(row, col, newCard.asInstanceOf[T])

239
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
822
959
30
<nosymbol>
Block
true
0
false
{
  val newCard: Card = card.turnCard();
  Matrix.this.update(row, col, newCard.asInstanceOf[T])
}

240
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
1011
1013
33
<nosymbol>
Literal
false
0
false
()

241
src\main\scala\model\Matrix.scala
<empty>
Matrix
Class
Matrix
select
1011
1013
33
<nosymbol>
Block
true
0
false
()

242
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1206
1207
41
<nosymbol>
Literal
false
0
false
1

243
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1229
1247
41
scala.Int.==
Apply
false
0
false
cardCount.%(x$2).==(0)

244
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1205
1248
41
scala.collection.StrictOptimizedIterableOps.filter
Apply
false
0
false
scala.Predef.intWrapper(1).to(cardCount).filter(((x$2: Int) => cardCount.%(x$2).==(0)))

245
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1258
1258
42
scala.Tuple2._1
Select
false
0
false
x$3._1

246
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1264
1264
42
scala.Tuple2._2
Select
false
0
false
x$3._2

247
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1473
1473
46
scala.Tuple2._1
Select
false
0
false
x$4._1

248
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1484
1484
46
scala.Tuple2._2
Select
false
0
false
x$4._2

249
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1562
1563
47
<nosymbol>
Literal
false
0
false
1

250
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1567
1580
47
scala.Int./
Apply
false
0
false
cardCount./(2)

251
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1600
1627
47
Card.<init>
Apply
false
0
false
new Card(id, FaceDownState)

252
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1629
1656
47
Card.<init>
Apply
false
0
false
new Card(id, FaceDownState)

253
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1596
1657
47
scala.collection.SeqFactory.Delegate.apply
Apply
false
0
false
scala.`package`.Seq.apply[Card](new Card(id, FaceDownState), new Card(id, FaceDownState))

254
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1561
1658
47
scala.collection.StrictOptimizedIterableOps.flatMap
Apply
false
0
false
scala.Predef.intWrapper(1).to(cardCount./(2)).flatMap[Card](((id: Int) => scala.`package`.Seq.apply[Card](new Card(id, FaceDownState), new Card(id, FaceDownState))))

255
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1701
1727
49
Card.<init>
Apply
false
0
false
new Card(0, FaceDownState)

256
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1664
1735
49
MatrixFactory.create
Apply
false
0
false
factory.create(finalRows, finalCols, new Card(0, FaceDownState), cards)

257
src\main\scala\model\Matrix.scala
<empty>
Matrix
Object
Matrix
setupMatrix
1181
1739
40
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[Matrix[Card]]({
  val factors: IndexedSeq[Int] = scala.Predef.intWrapper(1).to(cardCount).filter(((x$2: Int) => cardCount.%(x$2).==(0)));
  <synthetic> <artifact> private[this] val x$3: (Int, Int) = (factors.foldLeft[(Int, Int)](scala.Tuple2.apply[Int, Int](1, cardCount))(((best: (Int, Int), current: Int) => {
    val other: Int = cardCount./(current);
    if (java.lang.Math.abs(current.-(other)).<(java.lang.Math.abs(best._1.-(best._2))))
      scala.Tuple2.apply[Int, Int](current, other)
    else
      best
  })): (Int, Int) @unchecked) match {
    case (_1: Int, _2: Int): (Int, Int)((rows @ _), (cols @ _)) => scala.Tuple2.apply[Int, Int](rows, cols)
  };
  val rows: Int = x$3._1;
  val cols: Int = x$3._2;
  <synthetic> <artifact> private[this] val x$4: (Int, Int) = (if (rows.>(cols))
    scala.Tuple2.apply[Int, Int](cols, rows)
  else
    scala.Tuple2.apply[Int, Int](rows, cols): (Int, Int) @unchecked) match {
    case (_1: Int, _2: Int): (Int, Int)((finalRows @ _), (finalCols @ _)) => scala.Tuple2.apply[Int, Int](finalRows, finalCols)
  };
  val finalRows: Int = x$4._1;
  val finalCols: Int = x$4._2;
  val cards: IndexedSeq[Card] = scala.Predef.intWrapper(1).to(cardCount./(2)).flatMap[Card](((id: Int) => scala.`package`.Seq.apply[Card](new Card(id, FaceDownState), new Card(id, FaceDownState))));
  factory.create(finalRows, finalCols, new Card(0, FaceDownState), cards)
})

258
src\main\scala\model\Matrix.scala
<empty>
StandardMatrixFactory
Class
StandardMatrixFactory
create
2008
2042
59
Matrix.<init>
ApplyToImplicitArgs
false
0
false
new Matrix[Card](rows, cols, fill)((ClassTag.apply[Card](classOf[Card]): scala.reflect.ClassTag[Card]))

259
src\main\scala\model\Matrix.scala
<empty>
StandardMatrixFactory
Class
StandardMatrixFactory
create
2047
2082
60
Matrix.initializeWithCards
Apply
false
0
false
matrix.initializeWithCards(cards)

260
src\main\scala\model\Matrix.scala
<empty>
RandomMatrixFactory
Class
RandomMatrixFactory
create
2266
2300
67
Matrix.<init>
ApplyToImplicitArgs
false
0
false
new Matrix[Card](rows, cols, fill)((ClassTag.apply[Card](classOf[Card]): scala.reflect.ClassTag[Card]))

261
src\main\scala\model\Matrix.scala
<empty>
RandomMatrixFactory
Class
RandomMatrixFactory
create
2339
2339
68
scala.collection.BuildFromLowPriority2.buildFromIterableOps
TypeApply
false
0
false
collection.this.BuildFrom.buildFromIterableOps[Seq, Card, Card]

262
src\main\scala\model\Matrix.scala
<empty>
RandomMatrixFactory
Class
RandomMatrixFactory
create
2325
2346
68
scala.util.Random.shuffle
ApplyToImplicitArgs
false
0
false
scala.util.Random.shuffle[Card, Seq[Card]](cards)(collection.this.BuildFrom.buildFromIterableOps[Seq, Card, Card])

263
src\main\scala\model\Matrix.scala
<empty>
RandomMatrixFactory
Class
RandomMatrixFactory
create
2351
2392
69
Matrix.initializeWithCards
Apply
false
0
false
matrix.initializeWithCards(shuffledCards)

264
src\main\scala\util\InputHandler.scala
util
RealInputHandler
Object
util.RealInputHandler
readLine
230
255
10
scala.io.StdIn.readLine
Apply
false
0
false
scala.io.StdIn.readLine()

265
src\main\scala\util\InputHandler.scala
util
RealInputHandler
Object
util.RealInputHandler
askForInput
316
331
13
scala.Predef.println
Apply
false
0
false
scala.Predef.println(prompt)

266
src\main\scala\util\InputHandler.scala
util
RealInputHandler
Object
util.RealInputHandler
askForInput
363
373
14
util.RealInputHandler.readLine
Apply
false
0
false
RealInputHandler.this.readLine()

267
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
<none>
110
118
8
scala.collection.IterableFactory.apply
Apply
false
0
false
scala.`package`.Vector.apply[Nothing]()

268
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
add
165
181
10
scala.collection.SeqOps.:+
Apply
false
0
false
Observable.this.subscribers.:+[util.Observer](s)

269
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
add
151
181
10
util.Observable.subscribers_=
Apply
false
0
false
Observable.this.subscribers_=(Observable.this.subscribers.:+[util.Observer](s))

270
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
remove
258
264
12
java.lang.Object.==
Apply
false
0
false
o.==(s)

271
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
remove
231
265
12
scala.collection.StrictOptimizedIterableOps.filterNot
Apply
false
0
false
Observable.this.subscribers.filterNot(((o: util.Observer) => o.==(s)))

272
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
remove
217
265
12
util.Observable.subscribers_=
Apply
false
0
false
Observable.this.subscribers_=(Observable.this.subscribers.filterNot(((o: util.Observer) => o.==(s))))

273
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
notifyObservers
322
330
14
util.Observer.update
Select
false
0
false
o.update

274
src\main\scala\util\Observable.scala
util
Observable
Class
util.Observable
notifyObservers
297
331
14
scala.collection.immutable.Vector.foreach
Apply
false
0
false
Observable.this.subscribers.foreach[Unit](((o: util.Observer) => o.update))

